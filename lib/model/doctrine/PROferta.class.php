<?php

/**
 * PROferta
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PROferta extends BasePROferta
{
    public function save(Doctrine_Connection $conn = null)
    {
      $conn = $conn ? $conn : $this->getTable()->getConnection();
      $conn->beginTransaction();
        try
        {
          $ret = parent::save($conn);
          $this->updateLuceneIndex();
          $conn->commit();
          return $ret;
        }
        catch (Exception $e)
        {
          $conn->rollBack();
          throw $e;
          }
    }
    
    public function delete(Doctrine_Connection $conn = null)
    {
      $index = PROfertaTable::getLuceneIndex();
      foreach ($index->find('pk:'.$this->getId()) as $hit)
      {
        $index->delete($hit->id);
      }
      return parent::delete($conn);
    }

    
    public function updateLuceneIndex()
        {
          $index = PROfertaTable::getLuceneIndex();
          // remove existing entries
          foreach ($index->find('pk:'.$this->getId()) as $hit)
          {
            $index->delete($hit->id);
          }
          Zend_Search_Lucene_Analysis_Analyzer::setDefault(
            new Zend_Search_Lucene_Analysis_Analyzer_Common_Utf8());
          $doc = new Zend_Search_Lucene_Document();
          // store job primary key to identify it in the search results
          $doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));
          // index job fields
          $doc->addField(Zend_Search_Lucene_Field::UnStored('codigo',
            $this->getCodigo(), 'utf-8'));
          $doc->addField(Zend_Search_Lucene_Field::UnStored('creador',
            $this->getResponsable(), 'utf-8'));
          $doc->addField(Zend_Search_Lucene_Field::UnStored('titulo',
            $this->getTitulo(), 'utf-8'));
          $doc->addField(Zend_Search_Lucene_Field::UnStored('estado',
            $this->getNombreEstado(), 'utf-8'));
          $doc->addField(Zend_Search_Lucene_Field::UnStored('cliente',
            $this->getNombreCliente(), 'utf-8'));
          // add job to the index
          $index->addDocument($doc);
          $index->commit();
        }

        
    public function getProyecto()
    {
      $q = Doctrine_Query::create()
            ->from('PRProyecto p')
            ->where('p.oferta_id = ?', $this->getId());
       return $q->fetchOne();
    }
        
    public function getNombreTipo()
    {
      return Doctrine::getTable('TOferta')->find(array($this->getTipoOferta()))->getName();
    }
        
    public function getNombreEstado()
    {
      return Doctrine::getTable('TEstado')->find(array($this->getEstado()))->getName();
    }
    
    public function getNombreCliente()
    {
      return Doctrine::getTable('PRCliente')->find(array($this->getClienteId()))->getName();
    }
    
    public function getResponsable()
    {
      $c = Doctrine::getTable('PREmpleado')->find(array($this->getCreadorId()));
      return $c->getName().' '.$c->getApellidos();
    }
    
    public function getMails()
    {
      $mails = array('plm.price@price-roch.es'=>'Admin');
      $q = Doctrine_Query::create()
            ->from('PREmpleado e')
            ->leftJoin('e.TRol r')
            ->where('e.id = ?', $this->getCreadorId())
            ->orWhere('r.name  != ?', 'Director');
      foreach($q->execute() as $c){
        $mails[$c->getEmail()] = $c->getName().' '.$c->getApellidos();
      }
      return $mails;
    }
    
    public function getFechaCorta()
    {
        return $this->getDateTimeObject('fecha_presentacion')->format('d/m/Y');
    }
    
    public function getCodigo()
    {
        return 'OF-'.$this->getDateTimeObject('fecha_creacion')->format('Y').'-'.(string)$this->getId() ;
    }
    
    public function haExpirado()
    {
      return (($this->getDateTimeObject('fecha_presentacion')->format('U') - time()) < 0 && $this->getEstado() <= 4);
    }
    
    public function tiempoRestante()
    {
      return $this->getDateTimeObject('fecha_presentacion')->format('U') - time();
    }

    public function getCostes()
    {
        $q = Doctrine_Query::create()
            ->from('PRCoste c')
            ->where('c.oferta_id = ?', $this->getId());
        return Doctrine_Core::getTable('PRCoste')->getCostesQuery($q);
    }
    
    public function getHitos()
    {
        $q = Doctrine_Query::create()
            ->from('PRHito h')
            ->where('h.oferta_id = ?', $this->getId())
            ->orderBy('h.momento ASC');
        return Doctrine_Core::getTable('PRHito')->getHitosQuery($q);
    }
  
    public function getCosteFinanciacion()
    {
        return $this->getFinanciacion()/100*$this->getCosteTotal();
    }
    
    public function getCosteEstructura()
    {
        return $this->getEstructura()/100*$this->getImporteOferta();
    }
    
    
    public function getCosteTotal()
    {
        $total = $this->getCosteEstructura();
        foreach($this->getCostes() as $coste){
            
            $total += $coste->getImporte();
        }
        return $total;
    }
    
    public function getCosteFinal()
    {

        return $this->getCosteTotal() + $this->getCosteFinanciacion();
    }
    
    public function getMargen()
    {
        return $this->getImporteOferta() - $this->getCosteFinal();
    }
    
    public function getRentabilidad()
    {
        return ($this->getMargen()/$this->getImporteOferta())*100;
    }
    
    public function getImporteOferta()
    {
        return $this->getBaseLicitacion() * (1 - $this->getDescuento()/100);
    }
    
    public function getGrafica()
    {
        $margen = array(0=>0);
        $promedio = array(0=>0, $this->getDuracion()=>$this->getMargen());
        $ingresos = array(0=>0);
        $gastos = array(0=>0);
        $ticks1 = array($this->getDuracion()=>'Día '.$this->getDuracion());
        $ticks2 = array($this->getDuracion()=>'[FINAL]');
        $poracum = 0;
        $margenacum = 0;
        $lastingreso = 0;
        $lastgasto = 0;
        $gasto_diario = $this->getCosteFinal()/$this->getDuracion();
        
        if($this->getDuracion() > 30){
            foreach(range(0, $this->getDuracion() , 30) as $dia){
                $gastos[$dia] = $gasto_diario * $dia;
                $ticks1[$dia] = 'Día '.$dia;
            }
        }
        $gastos[$this->getDuracion()]=$this->getCosteFinal();
        $gastos[$this->getDuracion()+1]=$this->getCosteFinal();
        
        if($this->getTipoFacturacion() == 'Certificación mensual'){
            if($this->getDuracion() > 30){
                foreach(range(0, $this->getDuracion() , 30) as $dia){
                    $ingresos[$dia] = $this->getImporteOferta() * $dia / $this->getDuracion();
                }
            }
        }else{
            foreach($this->getHitos() as $i=>$hito){
                $poracum += $hito->getPorcentaje()/100;
                 $ticks2[$hito->getMomento()] = 'Hito '.($i+1);
                 $ticks1[$hito->getMomento()] = 'Día '.$hito->getMomento();
                $ingresos[$hito->getMomento()] = $poracum * $this->getImporteOferta();
            }
        }
        $ingresos[$this->getDuracion()]=$this->getImporteOferta();
        $ingresos[$this->getDuracion()+1]=$this->getImporteOferta();

        foreach(range(0,$this->getDuracion()+1) as $dia){
            if(isset($ingresos[$dia]))
            {
                $margenacum += $ingresos[$dia]-$lastingreso;
                $lastingreso = $ingresos[$dia];
                $margen[$dia] = $margenacum;
            }
            if(isset($gastos[$dia]))
            {
                $margenacum -= $gastos[$dia]-$lastgasto;
                $lastgasto = $gastos[$dia];
                $margen[$dia] = $margenacum;
            }
        }
        $margen[$this->getDuracion()]=$this->getMargen();
        $margen[$this->getDuracion()+1]=$this->getMargen();
        return array('Ingresos'=>$ingresos,'Margen'=>$margen,'Promedio'=>$promedio,'Gastos'=>$gastos, 'ticks1'=>$ticks1, 'ticks2'=>$ticks2);
    }
}
